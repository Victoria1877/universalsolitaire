


    def on_clown_release(self, x: float, y: float, button: int, modifiers: int):
        # Ignore if no cards are held
        if len(self.held_card) == 0:
            return
        
        first_held = self.held_card[0].suit
        #print("Number of held cards:", len(self.held_card))
        #print("Number of positions in held_card_og_position:", len(self.held_card_og_position))

    
        # Finds nearest pile and checks if they are touching
        pile, distance = arcade.get_closest_sprite(self.held_card[0], self.pmat_list)
        reset_position = True


        if arcade.check_for_collision(self.held_card[0], pile):
        # Check for collision with a pile
            pile_index = self.pmat_list.index(pile)

            pile_index = self.pmat_list.index(pile)
            cards_on_pile = self.piles[pile_index]
            topHeldCard = self.held_card[0]
            topHeldCardValue = topHeldCard.value
            topHeldCardSuit = topHeldCard.suit

            print(topHeldCardSuit)

            if cards_on_pile:
                lastCard = cards_on_pile[-1]
                cardStackPlacedOn = lastCard.value
                print("woof")
            
        
                # If it's the same pile as the original, do nothing
                if pile_index == self.cards_pile(self.held_card[0]):
                    pass
                
                if topHeldCardValue==int(cardStackPlacedOn)-1:
                    print("hello")


                # Check for placement on bottom of stack
                elif STACK_PILE1 <= pile_index <= STACK_PILE7:
                    bottom_position = (pile.center_y - CARD_VERTICAL_OFFSET * len(self.piles[pile_index])) + 170
                    for x, dropped_card in enumerate(self.held_card):
                        dropped_card.position = pile.center_x, bottom_position - CARD_VERTICAL_OFFSET * x
                        print(dropped_card.position)
                
                    # Move the card to the bottom of the pile
                    for card in self.held_card:
                        self.change_cards_pile(card, pile_index)
                    
                    if first_held == "Diamonds":
                        #print("YES")
                        pass

                    reset_position = False
            
                # For placing on win pile
                elif WIN_PILE_1 <= pile_index <= WIN_PILE_4:
                    for x, dropped_card in enumerate(self.held_card):
                        dropped_card.position = pile.center_x, pile.center_y

                    # Move the card to the bottom of the pile
                    for card in self.held_card:
                        self.change_cards_pile(card, pile_index)
                    reset_position = False
            elif topHeldCardValue==13:
                print("meow")
                # Check for placement on bottom of stack
                if STACK_PILE1 <= pile_index <= STACK_PILE7:
                    bottom_position = (pile.center_y - CARD_VERTICAL_OFFSET * len(self.piles[pile_index])) + 170
                    for x, dropped_card in enumerate(self.held_card):
                        dropped_card.position = pile.center_x, bottom_position - CARD_VERTICAL_OFFSET * x
                
                    # Move the card to the bottom of the pile
                    for card in self.held_card:
                        self.change_cards_pile(card, pile_index)
                    
                    if first_held == "Diamonds":
                        #print("YES")
                        pass
            
            elif topHeldCardValue==1:
                # For placing on win pile
                if WIN_PILE_1 <= pile_index <= WIN_PILE_4:
                    for x, dropped_card in enumerate(self.held_card):
                        dropped_card.position = pile.center_x, pile.center_y

                    # Move the card to the bottom of the pile
                    for card in self.held_card:
                        self.change_cards_pile(card, pile_index)
                    reset_position = False
        else:
            pass
                
        # Releases the cards and returns to original location if invalid placement
        if reset_position:
            for pile_index, card in enumerate(self.held_card):
                card.position = self.held_card_og_position[pile_index]
           

        # Sets held card to null
        self.held_card = []

